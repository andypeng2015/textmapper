// generated by Textmapper; DO NOT EDIT

import * as listener from './listener';

export type Selector = (nt : listener.NodeType) => boolean;

export const Any : Selector = (nt : listener.NodeType) => true;
export const JSONArray : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.JSONArray;
export const JSONMember : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.JSONMember;
export const JSONObject : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.JSONObject;
export const JSONText : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.JSONText;
export const JSONValue : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.JSONValue;
export const MultiLineComment : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.MultiLineComment;
export const InvalidToken : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.InvalidToken;
export const JSONString : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.JSONString;
export const NonExistingType : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.NonExistingType;
