// generated by Textmapper; DO NOT EDIT

import * as token from './token';
import * as listener from './listener';

export const startStackSize = 256;
export const startTokenBufferSize = 16;
export const noToken = token.TokenType.UNAVAILABLE;
export const eoiToken = token.TokenType.EOI;

let tmNonterminals: string[] = [
  "JSONText",
  "JSONValue",
  "JSONObject",
  "JSONMember",
  "JSONMemberList",
  "JSONArray",
  "JSONElementList",
  "JSONElementListopt",
];

export function symbolName(sym: token.TokenType): string {
  if (sym === noToken) {
    return "<no-token>";
  }
  if (sym < token.TokenType.NumTokens) {
    return token.TokenType[sym];
  }
  let i = sym - token.TokenType.NumTokens;
  if (i < tmNonterminals.length) {
    return tmNonterminals[i];
  }
  return "nonterminal(" + sym + ")";
}

export const tmAction : number[] = [
  -1, -1, -3, 6, 7, 1, 2, 3, 0, 4, 5, 9, -1, 11, -1, 14, -21, -1, -1, 8, -1,
  -1, 13, 10, 12, 15, -1, -2,
];
export const tmLalr : number[] = [
  2, -1, 4, -1, 10, -1, 11, -1, 13, -1, 14, -1, 15, -1, 5, 17, -1, -2, 7, -1,
  5, 16, -1, -2,
];

export const tmGoto : number[] = [
  0, 2, 2, 10, 14, 22, 24, 26, 30, 30, 30, 42, 50, 50, 58, 66, 74, 74, 76, 84,
  92, 96, 98, 106, 108, 110,
];

export const tmFromTo : number[] = [
  26, 27, 0, 1, 2, 1, 18, 1, 21, 1, 1, 11, 14, 19, 0, 2, 2, 2, 18, 2, 21, 2,
  17, 22, 12, 18, 14, 20, 16, 21, 0, 3, 1, 12, 2, 3, 18, 3, 20, 12, 21, 3, 0,
  4, 2, 4, 18, 4, 21, 4, 0, 5, 2, 5, 18, 5, 21, 5, 0, 6, 2, 6, 18, 6, 21, 6,
  0, 7, 2, 7, 18, 7, 21, 7, 0, 26, 0, 8, 2, 15, 18, 23, 21, 25, 0, 9, 2, 9,
  18, 9, 21, 9, 1, 13, 20, 24, 1, 14, 0, 10, 2, 10, 18, 10, 21, 10, 2, 16, 2,
  17,
];

export const tmRuleLen : number[] = [
  1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 3, 1, 3, 3, 1, 3, 1, 0,
];

export const tmRuleSymbol : number[] = [
  17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 20, 21, 21, 22, 23, 23, 24, 24,
];
export const tmRuleType : listener.NodeType[] = [
  listener.NodeType.JSONText, // JSONText : JSONValue
  listener.NodeType.JSONValue, // JSONValue : 'null'
  listener.NodeType.JSONValue, // JSONValue : 'true'
  listener.NodeType.JSONValue, // JSONValue : 'false'
  listener.NodeType.JSONValue, // JSONValue : JSONObject
  listener.NodeType.JSONValue, // JSONValue : JSONArray
  listener.NodeType.JSONValue, // JSONValue : JSONString
  listener.NodeType.JSONValue, // JSONValue : JSONNumber
  listener.NodeType.JSONObject, // JSONObject : '{' JSONMemberList '}'
  listener.NodeType.JSONObject, // JSONObject : '{' '}'
  listener.NodeType.JSONMember, // JSONMember : JSONString ':' JSONValue
  0, // JSONMemberList : JSONMember
  0, // JSONMemberList : JSONMemberList ',' JSONMember
  listener.NodeType.JSONArray, // JSONArray : '[' JSONElementListopt ']'
  0, // JSONElementList : JSONValue
  0, // JSONElementList : JSONElementList ',' JSONValue
  0, // JSONElementListopt : JSONElementList
  0, // JSONElementListopt :
];
// set(first JSONValue) = LBRACE, LBRACK, JSONSTRING, JSONNUMBER, NULL, TRUE, FALSE
export const Literals : token.TokenType[] = [
  2, 4, 10, 11, 13, 14, 15,
];
// set(follow ERROR) = 
export const afterErr : token.TokenType[] = [];